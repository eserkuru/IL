// <auto-generated />
using System;
using IL.SolutionBuilder.DataAccess.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IL.SolutionBuilder.DataAccess.Migrations
{
    [DbContext(typeof(SolutionBuilderContext))]
    partial class SolutionBuilderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IL.SolutionBuilder.Entities.Concrete.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("DirectoryName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFileCreated");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectType");

                    b.Property<int>("SourceType");

                    b.Property<int?>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("IL.SolutionBuilder.Entities.Concrete.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("DirectoryName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFileCreated");

                    b.Property<string>("LongDescription");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("ProjectName");

                    b.HasKey("Id");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("IL.SolutionBuilder.Entities.Concrete.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int?>("SolutionId");

                    b.Property<int>("SourceType");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("IL.SolutionBuilder.Entities.Concrete.Project", b =>
                {
                    b.HasOne("IL.SolutionBuilder.Entities.Concrete.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("IL.SolutionBuilder.Entities.Concrete.Unit", b =>
                {
                    b.HasOne("IL.SolutionBuilder.Entities.Concrete.Solution", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionId");
                });
#pragma warning restore 612, 618
        }
    }
}
